import { NextRequest, NextResponse } from 'next/server';
import { ethers } from 'ethers';
import { doc, getDoc, updateDoc, collection, addDoc } from 'firebase/firestore';
import { db } from '../../../lib/firebase';

// ABI simplificado do contrato G33TokenDistributor
const DISTRIBUTOR_ABI = [
  "function distributeTokens(address donor, uint256 donationAmountUsd) external",
  "function getAvailableTokens() external view returns (uint256)"
];

/**
 * API para distribui√ß√£o segura de tokens G33 ap√≥s doa√ß√µes
 * Esta API √© executada do lado do servidor e tem acesso seguro √†s chaves privadas
 */
export async function POST(request: NextRequest) {
  try {
    console.log("üîÑ Iniciando solicita√ß√£o de distribui√ß√£o de tokens G33");
    const { donorAddress, usdValue, donationId, transactionHash, network, cryptoSymbol } = await request.json();
    
    // Valida√ß√£o b√°sica de par√¢metros
    if (!donorAddress || !usdValue) {
      return NextResponse.json(
        { success: false, error: 'Par√¢metros inv√°lidos - endere√ßo do doador e valor USD s√£o obrigat√≥rios' },
        { status: 400 }
      );
    }
    
    console.log(`üìã Detalhes da solicita√ß√£o:
      - Endere√ßo do doador: ${donorAddress}
      - Valor USD: $${usdValue}
      - ID da doa√ß√£o: ${donationId || 'N√£o fornecido'}
      - Hash da transa√ß√£o: ${transactionHash || 'N√£o fornecido'}
      - Rede: ${network || 'N√£o especificada'}
    `);

    // Acessar a chave privada do distribuidor (dispon√≠vel no servidor)
    const privateKey = process.env.DISTRIBUTOR_PRIVATE_KEY;
    if (!privateKey) {
      console.error('‚ùå Chave privada do distribuidor n√£o encontrada nas vari√°veis de ambiente');
      return NextResponse.json(
        { success: false, error: 'Configura√ß√£o do distribuidor incompleta no servidor' },
        { status: 500 }
      );
    }
    
    // Buscar endere√ßo do contrato distribuidor no Firebase
    console.log("üîç Buscando configura√ß√µes do contrato distribuidor...");
    const configDocRef = doc(db, "settings", "contractConfig");
    const configSnap = await getDoc(configDocRef);
    
    if (!configSnap.exists()) {
      console.error("‚ùå Configura√ß√£o do contrato n√£o encontrada");
      return NextResponse.json(
        { success: false, error: 'Configura√ß√£o do contrato n√£o encontrada' },
        { status: 500 }
      );
    }
    
    const config = configSnap.data();
    const distributorAddress = config.tokenDistributorAddress;
    console.log(`‚úÖ Endere√ßo do contrato distribuidor encontrado: ${distributorAddress}`);
    
    // Configurar provider e wallet
    const rpcUrl = process.env.RPC_URL || "https://polygon-rpc.com";
    console.log(`üåê Conectando √† rede via RPC: ${rpcUrl}`);
    
    const provider = new ethers.providers.JsonRpcProvider(rpcUrl);
    const wallet = new ethers.Wallet(privateKey, provider);
    
    // Verificar que a carteira est√° configurada corretamente
    const walletAddress = await wallet.getAddress();
    console.log(`üëõ Carteira do distribuidor configurada: ${walletAddress.substring(0, 6)}...${walletAddress.substring(walletAddress.length - 4)}`);
    
    // Conectar ao contrato distribuidor
    const contract = new ethers.Contract(distributorAddress, DISTRIBUTOR_ABI, wallet);
    
    // Verificar se h√° tokens suficientes dispon√≠veis
    const availableTokensWei = await contract.getAvailableTokens();
    const availableTokens = parseFloat(ethers.utils.formatEther(availableTokensWei));
    const tokensNeeded = usdValue; // 1 token por 1 USD
    
    console.log(`üí∞ Tokens dispon√≠veis para distribui√ß√£o: ${availableTokens}`);
    console.log(`üéØ Tokens necess√°rios para esta doa√ß√£o: ${tokensNeeded}`);
    
    if (availableTokens < tokensNeeded) {
      console.error(`‚ùå Tokens insuficientes no contrato distribuidor (${availableTokens} dispon√≠veis, ${tokensNeeded} necess√°rios)`);
      return NextResponse.json(
        { 
          success: false, 
          error: `Tokens insuficientes no distribuidor. Dispon√≠vel: ${availableTokens}, Necess√°rio: ${tokensNeeded}` 
        },
        { status: 400 }
      );
    }
    
    // Converter valor USD para o formato esperado pelo contrato (x100 para precis√£o de 2 casas decimais)
    const usdValueScaled = Math.floor(usdValue * 100);
    console.log(`üßÆ Valor USD escalado para o contrato: ${usdValueScaled}`);
    
    // Executar a distribui√ß√£o de tokens
    console.log(`üöÄ Enviando transa√ß√£o para distribuir ${tokensNeeded} tokens para ${donorAddress}...`);
    const tx = await contract.distributeTokens(donorAddress, usdValueScaled);
    console.log(`üì§ Transa√ß√£o enviada! Hash: ${tx.hash}`);
    
    // Aguardar confirma√ß√£o (1 bloco)
    console.log("‚è≥ Aguardando confirma√ß√£o da transa√ß√£o...");
    const receipt = await tx.wait(1);
    console.log(`‚úÖ Transa√ß√£o confirmada! Gas usado: ${receipt.gasUsed.toString()}`);
    
    // Se temos um ID de doa√ß√£o, atualizamos o registro no Firebase
    if (donationId) {
      try {
        const donationRef = doc(db, 'tokenDonations', donationId);
        await updateDoc(donationRef, {
          status: 'distributed',
          distributionTxHash: tx.hash
        });
        console.log(`üìù Registro de doa√ß√£o ${donationId} atualizado com sucesso`);
      } catch (updateError) {
        console.error("‚ö†Ô∏è Erro ao atualizar registro da doa√ß√£o:", updateError);
        // N√£o falha a requisi√ß√£o se apenas a atualiza√ß√£o do registro falhar
      }
    } else {
      // Se n√£o temos um ID de doa√ß√£o, criamos um novo registro
      try {
        await addDoc(collection(db, 'tokenDonations'), {
          donorAddress,
          donationAmount: 0, // N√£o temos o valor original em cripto
          usdValue,
          tokenAmount: tokensNeeded,
          transactionHash: transactionHash || tx.hash,
          network: network || 'polygon',
          cryptoSymbol: cryptoSymbol || 'UNKNOWN',
          createdAt: new Date(),
          status: 'distributed',
          distributionTxHash: tx.hash
        });
        console.log("üìù Novo registro de doa√ß√£o criado");
      } catch (addError) {
        console.error("‚ö†Ô∏è Erro ao criar novo registro de doa√ß√£o:", addError);
        // N√£o falha a requisi√ß√£o se apenas a cria√ß√£o do registro falhar
      }
    }
    
    // Retornar sucesso
    return NextResponse.json({
      success: true,
      transactionHash: tx.hash,
      tokenAmount: tokensNeeded,
      message: `Distribui√ß√£o de ${tokensNeeded} tokens G33 conclu√≠da com sucesso`
    });
    
  } catch (error: any) {
    console.error('‚ùå Erro ao distribuir tokens:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error.message || 'Erro ao distribuir tokens',
        details: error.code || error.reason || 'Erro interno no servidor'
      },
      { status: 500 }
    );
  }
}