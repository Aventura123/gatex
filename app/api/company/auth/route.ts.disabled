import { NextResponse } from "next/server";
import { db } from "../../../../lib/firebase";
import { collection, query, where, getDocs } from "firebase/firestore";
import bcrypt from "bcryptjs";

// Handler para método OPTIONS (necessário para CORS no Netlify)
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  });
}

export async function POST(req: Request) {
  // Adicionar headers CORS para compatibilidade com Netlify
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    'Content-Type': 'application/json',
  };
  
  try {
    // Verificar se a requisição é um objeto válido
    if (!req || !req.json) {
      return NextResponse.json({ error: 'Objeto de requisição inválido' }, { status: 400, headers });
    }
    
    const body = await req.json();
    const username = body.username;
    const password = body.password;
    
    if (!username || !password) {
      console.log('Username ou password ausente');
      return NextResponse.json({ error: 'Username e password obrigatórios' }, { status: 400, headers });
    }
    
    console.log("Tentativa de login para usuário:", username);
    
    if (!db) {
      throw new Error("Firestore instance is not initialized");
    }

    // Consultar a coleção companies no Firestore
    const q = query(
      collection(db, "companies"),
      where("username", "==", username)
    );

    const querySnapshot = await getDocs(q);
    console.log("Resultado da consulta:", querySnapshot.size);

    if (!querySnapshot.empty) {
      // Obter os dados da empresa
      const companyData = querySnapshot.docs[0].data();
      const companyId = querySnapshot.docs[0].id;

      console.log("Stored hashed password:", companyData.password);
      console.log("Provided password:", password);

      // Compare the provided password with the hashed password
      let isPasswordValid = await bcrypt.compare(password, companyData.password);

      // Também permitir comparação direta para senhas não criptografadas (para testes)
      if (!isPasswordValid && companyData.password === password) {
        console.log("Direct password match used for login");
        isPasswordValid = true;
      }

      console.log("Password comparison result:", isPasswordValid);

      if (isPasswordValid) {
        console.log("Login bem-sucedido para empresa:", companyData.name || username);

        // Criar um token simples com o ID da empresa
        const token = Buffer.from(companyId).toString("base64");

        return NextResponse.json({ 
          success: true, 
          token: token,
          company: {
            id: companyId,
            name: companyData.name || username,
            photoURL: companyData.photoURL || companyData.photo
          }
        }, { headers });
      } else {
        console.log("Credenciais inválidas para usuário:", username);
        return NextResponse.json({ success: false, error: "Credenciais inválidas" }, { status: 401, headers });
      }
    } else {
      console.log("Credenciais inválidas para usuário:", username);
      return NextResponse.json({ success: false, error: "Credenciais inválidas" }, { status: 401, headers });
    }
  } catch (error) {
    console.error("Erro ao consultar o Firestore:", error);
    return NextResponse.json({ success: false, error: "Erro no servidor" }, { status: 500, headers });
  }
}