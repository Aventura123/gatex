import { ethers } from 'ethers';
import { collection, addDoc, getDocs, query, where, doc, getDoc, updateDoc } from 'firebase/firestore';
import { db } from '../lib/firebase';

// ABI simplificado do contrato G33TokenDistributor
const DISTRIBUTOR_ABI = [
  "function distributeTokens(address donor, uint256 donationAmountUsd) external",
  "function getAvailableTokens() external view returns (uint256)",
  "function tokensDistributed(address donor) external view returns (uint256)",
  "function totalDonated(address donor) external view returns (uint256)",
  "function totalDistributedTokens() external view returns (uint256)",
  "function totalDonationsUsd() external view returns (uint256)"
];

// Lista de URLs RPC confi√°veis para a rede Polygon
const POLYGON_RPC_URLS = [
  // Endpoints WebSockets (WS) - podem contornar certas restri√ß√µes de rede
  "wss://polygon-mainnet.g.alchemy.com/v2/demo", // Alchemy WS p√∫blico
  "wss://ws-matic-mainnet.chainstacklabs.com",  // ChainStack WS
  
  // Endpoints HTTP padr√£o
  "https://polygon-rpc.com",
  "https://polygon.llamarpc.com",
  "https://rpc-mainnet.maticvigil.com",
  "https://polygon-mainnet.public.blastapi.io",
  "https://polygon-bor.publicnode.com",
  "https://polygon.meowrpc.com"
];

// Endpoints locais para desenvolvimento
const LOCAL_RPC_URLS = [
  "http://127.0.0.1:8545", // Ganache / Hardhat padr√£o
  "http://localhost:8545"  // Alternativo
];

// Configura√ß√µes para o Infura (usando chave p√∫blica para teste)
const INFURA_POLYGON_RPC = "https://polygon-mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161";

// Interface para registro de doa√ß√µes
interface TokenDonation {
  donorAddress: string;
  donationAmount: number; // valor em cripto
  usdValue: number; // valor convertido para USD
  tokenAmount: number; // quantidade de tokens a serem distribu√≠dos
  transactionHash: string;
  network: string;
  cryptoSymbol: string;
  createdAt: Date;
  status: 'pending' | 'distributed' | 'failed';
  distributionTxHash?: string;
  error?: string; // Campo adicional para armazenar mensagens de erro
}

/**
 * Verifica se a aplica√ß√£o est√° em uma rede com acesso √† internet limitado
 * e que precisa usar fallbacks especiais
 */
async function isRestrictedNetwork(): Promise<boolean> {
  try {
    // Tenta acessar uma URL externa conhecida
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 3000);
    
    const response = await fetch('https://cloudflare.com', { 
      signal: controller.signal,
      method: 'HEAD'
    });
    clearTimeout(timeoutId);
    
    return !response.ok;
  } catch (error) {
    console.log('Detectada poss√≠vel restri√ß√£o de rede');
    return true;
  }
}

/**
 * Servi√ßo para interagir com o contrato G33TokenDistributor
 * Este servi√ßo gerencia a distribui√ß√£o autom√°tica de tokens G33 para doadores
 */
class G33TokenDistributorService {
  private provider: ethers.providers.Provider | null = null;
  private wallet: ethers.Wallet | null = null;
  private contract: ethers.Contract | null = null;
  private distributorAddress: string | null = null;
  private isInitialized: boolean = false;
  private initializationError: string | null = null;
  private lastInitAttempt: number = 0;
  private isDevMode: boolean = process.env.NODE_ENV === 'development';
  private networkRestricted: boolean = false;

  constructor() {
    // Inicializa√ß√£o ass√≠ncrona
    this.init();
  }

  /**
   * Tenta criar um provider confi√°vel para a rede Polygon com m√∫ltiplas tentativas
   * @returns Um provider conectado ou null se falhar
   */
  private async createReliablePolygonProvider(): Promise<ethers.providers.Provider | null> {
    try {
      // Verificar se estamos em uma rede restrita
      this.networkRestricted = await isRestrictedNetwork();
      
      // Lista final de URLs para tentar
      let urlsToTry = [...POLYGON_RPC_URLS];
      
      // Em redes restritas ou ambiente de desenvolvimento, adiciona endpoints locais
      if (this.networkRestricted || this.isDevMode) {
        console.log('Usando tamb√©m endpoints locais (desenvolvimento/rede restrita)');
        urlsToTry = [...urlsToTry, ...LOCAL_RPC_URLS];
      }
      
      // Tentar cada URL RPC at√© encontrar uma que funcione
      for (const url of urlsToTry) {
        try {
          console.log(`Tentando conectar ao RPC: ${url}`);
          
          let provider: ethers.providers.Provider;
          
          // Diferentes tipos de conex√£o baseados na URL
          if (url.startsWith('wss://')) {
            // WebSockets provider
            provider = new ethers.providers.WebSocketProvider(url);
          } else {
            // JsonRpc provider padr√£o
            provider = new ethers.providers.JsonRpcProvider(url);
          }
          
          // Teste a conex√£o com o provider obtendo o n√∫mero do bloco atual
          const blockNumber = await Promise.race([
            provider.getBlockNumber(),
            new Promise<number>((_, reject) => {
              setTimeout(() => reject(new Error('Timeout ao conectar ao RPC')), 5000);
            })
          ]);
          
          console.log(`‚úÖ Conex√£o com RPC bem-sucedida via ${url}, bloco atual: ${blockNumber}`);
          return provider;
        } catch (error) {
          console.warn(`‚ùå Falha ao conectar ao RPC ${url}: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
          // Continuar para o pr√≥ximo URL
        }
      }
      
      // Se estamos em modo de desenvolvimento, criar um provider simulado
      if (this.isDevMode) {
        console.log('üìù Criando provider simulado para desenvolvimento...');
        
        // Este provider n√£o far√° conex√µes reais, mas permitir√° testes em ambientes sem blockchain
        const mockProvider = new ethers.providers.FallbackProvider([
          new ethers.providers.JsonRpcProvider('http://localhost:8545')
        ], 1);
        
        // Override do getBlockNumber para desenvolvimento
        const originalGetBlockNumber = mockProvider.getBlockNumber.bind(mockProvider);
        mockProvider.getBlockNumber = async function() {
          try {
            return await originalGetBlockNumber();
          } catch (error) {
            console.warn('Usando bloco simulado para desenvolvimento');
            return Promise.resolve(0);
          }
        };
        
        return mockProvider;
      }
      
      console.error('‚ùå Todas as tentativas de conex√£o √† rede Polygon falharam');
      return null;
      
    } catch (error) {
      console.error('‚ùå Erro cr√≠tico ao criar provider:', error);
      return null;
    }
  }

  /**
   * Inicializa o servi√ßo carregando configura√ß√µes e conectando ao contrato
   */
  async init(): Promise<void> {
    try {
      // Evitar tentativas frequentes de inicializa√ß√£o
      const now = Date.now();
      if (this.lastInitAttempt > 0 && (now - this.lastInitAttempt) < 60000) {
        console.log("Tentativa de inicializa√ß√£o muito recente, aguardando antes de tentar novamente");
        return;
      }
      
      this.lastInitAttempt = now;
      this.initializationError = null;
      console.log("Iniciando G33TokenDistributorService...");
      
      // Buscar configura√ß√µes do contrato no Firebase (apenas o endere√ßo do contrato)
      const configDoc = await getDoc(doc(db, "settings", "contractConfig"));
      
      if (configDoc.exists()) {
        const config = configDoc.data();
        this.distributorAddress = config.tokenDistributorAddress;
        console.log(`Endere√ßo do distribuidor obtido: ${this.distributorAddress}`);
        
        // Verificar a chave privada
        let privateKey = process.env.DISTRIBUTOR_PRIVATE_KEY;
        
        // No modo de desenvolvimento, podemos usar uma chave privada simulada se n√£o houver uma real
        if (!privateKey && this.isDevMode) {
          privateKey = "0x0000000000000000000000000000000000000000000000000000000000000001"; // Chave simulada
          console.log("üîë Usando chave privada simulada para desenvolvimento");
        } else if (!privateKey) {
          throw new Error("Chave privada do distribuidor n√£o encontrada nas vari√°veis de ambiente");
        }
        
        // Configurar provider com mecanismo de retry para a rede Polygon
        const provider = await this.createReliablePolygonProvider();
        
        if (!provider) {
          if (this.isDevMode) {
            console.log("‚ö†Ô∏è N√£o foi poss√≠vel conectar √† blockchain. Operando em modo de desenvolvimento limitado.");
            this.isInitialized = true; // Em desenvolvimento, permitimos inicializa√ß√£o mesmo sem provider
            return;
          } else {
            throw new Error("N√£o foi poss√≠vel estabelecer conex√£o com a rede Polygon. Verifique sua conex√£o com a internet.");
          }
        }
        
        this.provider = provider;
        // Adicionar operador '!' para garantir que TypeScript entenda que privateKey √© uma string
        this.wallet = new ethers.Wallet(privateKey!, provider);
        const walletAddress = await this.wallet.getAddress();
        console.log(`Carteira do distribuidor configurada: ${walletAddress.substring(0, 6)}...${walletAddress.substring(walletAddress.length - 4)}`);
        
        // Conectar ao contrato
        this.contract = new ethers.Contract(this.distributorAddress, DISTRIBUTOR_ABI, this.wallet);
        
        // Verificar se o contrato est√° acess√≠vel
        try {
          const availableTokens = await this.contract.getAvailableTokens();
          console.log(`Contrato do distribuidor conectado com sucesso. Tokens dispon√≠veis: ${ethers.utils.formatEther(availableTokens)}`);
          this.isInitialized = true;
        } catch (contractError: unknown) {
          const errorMessage = contractError instanceof Error 
            ? contractError.message
            : "Erro desconhecido ao acessar fun√ß√µes do contrato";
            
          // Em desenvolvimento, permitir inicializa√ß√£o mesmo com erro no contrato
          if (this.isDevMode) {
            console.warn(`‚ö†Ô∏è Erro ao acessar fun√ß√µes do contrato: ${errorMessage}`);
            console.log("‚ö†Ô∏è Continuando em modo de desenvolvimento limitado");
            this.isInitialized = true;
          } else {
            throw new Error(`Erro ao acessar fun√ß√µes do contrato: ${errorMessage}`);
          }
        }
        
        return;
      } else {
        throw new Error("Documento de configura√ß√£o do contrato n√£o encontrado no Firebase");
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "Erro desconhecido";
      this.initializationError = errorMessage;
      console.error("Erro ao inicializar G33TokenDistributorService:", errorMessage);
      this.isInitialized = false;
    }
  }

  /**
   * Verifica se o servi√ßo est√° inicializado e pronto para uso
   * @returns Verdadeiro se o servi√ßo estiver inicializado
   */
  private async ensureInitialized(): Promise<boolean> {
    if (this.isInitialized) return true;
    
    // Tentar inicializar novamente
    await this.init();
    return this.isInitialized;
  }

  /**
   * Distribui tokens G33 para um doador com base no valor da doa√ß√£o em USD
   * @param donorAddress Endere√ßo do doador
   * @param usdValue Valor da doa√ß√£o em USD (n√∫mero decimal)
   * @returns Hash da transa√ß√£o de distribui√ß√£o ou null se falhar
   */
  async distributeTokens(donorAddress: string, usdValue: number): Promise<string | null> {
    try {
      if (!(await this.ensureInitialized())) {
        throw new Error(`Servi√ßo n√£o inicializado. Erro: ${this.initializationError || "Desconhecido"}`);
      }
      
      // No modo de desenvolvimento sem contrato real, simular distribui√ß√£o
      if (this.isDevMode && (!this.contract || !this.provider)) {
        console.log(`üî∂ [SIMULA√á√ÉO] Distribuindo ${usdValue} tokens G33 para ${donorAddress}`);
        return "0x" + [...Array(64)].map(() => Math.floor(Math.random() * 16).toString(16)).join('');
      }
      
      // Verificar se h√° tokens dispon√≠veis
      const availableTokensWei = await this.contract!.getAvailableTokens();
      const availableTokens = parseFloat(ethers.utils.formatEther(availableTokensWei));
      const tokensNeeded = usdValue; // 1 token por 1 USD
      
      console.log(`Distribui√ß√£o de tokens: ${tokensNeeded} tokens necess√°rios, ${availableTokens} tokens dispon√≠veis`);
      
      if (availableTokens < tokensNeeded) {
        throw new Error(`Tokens insuficientes no contrato distribuidor. Dispon√≠vel: ${availableTokens}, Necess√°rio: ${tokensNeeded}`);
      }
      
      // Converter valor USD para o formato esperado pelo contrato (multiplicado por 100 para precis√£o)
      const usdValueScaled = Math.floor(usdValue * 100);
      
      console.log(`Chamando contrato para distribuir tokens para ${donorAddress}: ${usdValue} USD (${usdValueScaled} scaled)`);
      
      // Chamar a fun√ß√£o do contrato para distribuir tokens
      const tx = await this.contract!.distributeTokens(donorAddress, usdValueScaled);
      console.log(`Transa√ß√£o de distribui√ß√£o iniciada: ${tx.hash}`);
      
      const receipt = await tx.wait(1);
      console.log(`Tokens G33 distribu√≠dos para ${donorAddress}. Hash: ${receipt.transactionHash}`);
      return receipt.transactionHash;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "Erro desconhecido";
      console.error("Erro ao distribuir tokens G33:", errorMessage);
      return null;
    }
  }

  /**
   * Registra uma doa√ß√£o e distribui tokens G33 automaticamente
   * @param donorAddress Endere√ßo do doador
   * @param donationAmount Valor doado em criptomoeda
   * @param usdValue Valor equivalente em USD
   * @param tokenAmount Quantidade de tokens a distribuir
   * @param transactionHash Hash da transa√ß√£o de doa√ß√£o
   * @param network Rede da doa√ß√£o
   * @param cryptoSymbol S√≠mbolo da criptomoeda usada
   * @returns ID do documento no Firebase
   */
  async processDonation(
    donorAddress: string,
    donationAmount: number,
    usdValue: number,
    tokenAmount: number,
    transactionHash: string,
    network: string,
    cryptoSymbol: string
  ): Promise<string> {
    // Registrar a doa√ß√£o no Firebase
    const tokenDonation: TokenDonation = {
      donorAddress,
      donationAmount,
      usdValue,
      tokenAmount,
      transactionHash,
      network,
      cryptoSymbol,
      createdAt: new Date(),
      status: 'pending'
    };
    
    // Adicionar ao Firebase
    const docRef = await addDoc(collection(db, 'tokenDonations'), tokenDonation);
    
    // Tentar distribuir tokens automaticamente
    try {
      console.log(`Processando doa√ß√£o para distribui√ß√£o de tokens: ${tokenAmount} G33 para ${donorAddress}`);
      
      // Verificar inicializa√ß√£o antes de tentar distribuir
      if (!(await this.ensureInitialized())) {
        throw new Error(`Servi√ßo distribuidor n√£o inicializado. Erro: ${this.initializationError || "Desconhecido"}`);
      }
      
      const distributionTxHash = await this.distributeTokens(donorAddress, usdValue);
      
      if (distributionTxHash) {
        // Atualizar o registro com o resultado da distribui√ß√£o
        await updateDoc(docRef, {
          status: 'distributed',
          distributionTxHash
        });
        
        console.log(`Doa√ß√£o processada e tokens distribu√≠dos com sucesso: ${tokenAmount} G33 para ${donorAddress}`);
      } else {
        // Distribui√ß√£o falhou, mas o registro foi criado
        await updateDoc(docRef, {
          status: 'failed',
          error: 'Falha na distribui√ß√£o autom√°tica de tokens'
        });
        
        console.log(`Registro de doa√ß√£o criado, mas distribui√ß√£o de tokens falhou`);
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "Erro desconhecido";
      console.error("Erro ao processar distribui√ß√£o de tokens:", errorMessage);
      
      // Atualizar status para falha
      await updateDoc(docRef, {
        status: 'failed',
        error: errorMessage
      });
    }
    
    return docRef.id;
  }

  /**
   * Obt√©m o total de tokens dispon√≠veis para distribui√ß√£o
   * @returns Quantidade de tokens dispon√≠veis ou 0 se n√£o for poss√≠vel obter
   */
  async getAvailableTokens(): Promise<string> {
    try {
      if (!(await this.ensureInitialized())) {
        return "0";
      }
      
      const availableTokens = await this.contract!.getAvailableTokens();
      return ethers.utils.formatEther(availableTokens);
    } catch (error) {
      console.error("Erro ao obter tokens dispon√≠veis:", error);
      return "0";
    }
  }

  /**
   * Obt√©m estat√≠sticas de distribui√ß√£o
   */
  async getDistributionStats() {
    try {
      if (!(await this.ensureInitialized())) {
        return {
          totalDistributed: "0",
          totalDonationsUsd: "0",
          availableTokens: "0"
        };
      }
      
      const [totalDistributed, totalDonationsUsd, availableTokens] = await Promise.all([
        this.contract!.totalDistributedTokens(),
        this.contract!.totalDonationsUsd(),
        this.contract!.getAvailableTokens()
      ]);
      
      return {
        totalDistributed: ethers.utils.formatEther(totalDistributed),
        // totalDonationsUsd √© armazenado com 2 casas decimais extras (x100)
        totalDonationsUsd: (Number(totalDonationsUsd) / 100).toString(),
        availableTokens: ethers.utils.formatEther(availableTokens)
      };
    } catch (error) {
      console.error("Erro ao obter estat√≠sticas de distribui√ß√£o:", error);
      return {
        totalDistributed: "0",
        totalDonationsUsd: "0",
        availableTokens: "0"
      };
    }
  }

  /**
   * Obt√©m o total de tokens j√° distribu√≠dos para um doador espec√≠fico
   * @param donorAddress Endere√ßo do doador
   */
  async getTokensDistributedToDonor(donorAddress: string): Promise<string> {
    try {
      if (!(await this.ensureInitialized())) {
        return "0";
      }
      
      const tokenAmount = await this.contract!.tokensDistributed(donorAddress);
      return ethers.utils.formatEther(tokenAmount);
    } catch (error) {
      console.error(`Erro ao obter tokens distribu√≠dos para ${donorAddress}:`, error);
      return "0";
    }
  }
}

// Exportar a inst√¢ncia do servi√ßo
export const g33TokenDistributorService = new G33TokenDistributorService();

// Atualizar o endere√ßo do contrato distribuidor no Firebase
(async () => {
  try {
    const distributorAddress = "0x0726e207027cb4cffb28c3e65e90ec908916f38c"; // Endere√ßo correto do contrato implantado
    await updateDoc(doc(db, "settings", "contractConfig"), {
      tokenDistributorAddress: distributorAddress
    });
    console.log("Endere√ßo do contrato distribuidor atualizado no Firebase");
  } catch (err) {
    console.error("Erro ao atualizar endere√ßo do contrato no Firebase:", err);
  }
})();

export default g33TokenDistributorService;